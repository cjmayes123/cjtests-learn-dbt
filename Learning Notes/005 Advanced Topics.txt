HOOKS
run specific commands before or after models

Within your dbt_project file you can add the following syntax, which would allow usage for the role.

on run-end:
  - 'grant usage on schema analytics.dbt to role analyst'

You can add post hooks into the models.
models:
  cjtests_learn_dbt:
    # Config indicated by + and applies to all files under models/example/
    example:
      materialized: table
    vars:
      my_variable: 1
    post-hook: 'grant usage on schema {{target.this}} to role analyst'
    post-hook: 'grant select on {{this}} to role analyst'

You can also have triggers at the start.
on run-start:
    - "query to be executed"

SNAPSHOT
You can add snapshots into your dbt to create a log of current states for different tables/ID's

SOURCES EXAMPLE
You can refer to sources within the schema and sql file.

sources:
  - name: sample
    database: snowflake_sample_data
    schema: tpch_sf1
    tables:
      - name: orders
      - name: customer

SELECT
c.c_custkey,
c.c_name,
c.c_nationkey AS nation,
SUM(o.o_totalprice) AS total_order_price
FROM
{{ source('sample' , 'customer') }} c
LEFT JOIN
{{ source('sample' , 'orders')}} o
ON c.c_custkey = o.o_custkey
GROUP BY
c.c_custkey,
c.c_name,
c.c_nationkey

You can also run tests on source data - good way of showing expectations of data

sources:
  - name: sample
    database: snowflake_sample_data
    schema: tpch_sf1
    tables:
      - name: orders

      - name: customer
        columns:
          - name: c_custkey
            tests:
              - unique
              - not_null